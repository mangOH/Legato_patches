diff --git a/core/liblwm2m.h b/core/liblwm2m.h
index 96912c7..f9fc7b3 100644
--- a/core/liblwm2m.h
+++ b/core/liblwm2m.h
@@ -518,12 +518,14 @@ typedef struct _lwm2m_server_
     struct _lwm2m_server_ * next;         // matches lwm2m_list_t::next
     uint16_t                secObjInstID; // matches lwm2m_list_t::id
     uint16_t                shortID;      // servers short ID, may be 0 for bootstrap server
+    uint16_t                lastRxMID;    // last MID received
     time_t                  lifetime;     // lifetime of the registration in sec or 0 if default value (86400 sec), also used as hold off time for bootstrap servers
     time_t                  registration; // date of the last registration in sec or end of client hold off time for bootstrap servers
     lwm2m_binding_t         binding;      // client connection mode with this server
     void *                  sessionH;
     lwm2m_status_t          status;
     char *                  location;
+    bool                    rxMIDFlag;    // received MID flag
     bool                    dirty;
     lwm2m_block1_data_t *   block1Data;   // buffer to handle block1 data, should be replace by a list to support several block1 transfer by server.
 } lwm2m_server_t;
diff --git a/core/packet.c b/core/packet.c
index 211c0ce..5f00994 100644
--- a/core/packet.c
+++ b/core/packet.c
@@ -145,10 +145,25 @@ static bool is_block_transfer(coap_packet_t * message, uint32_t * block_num, uin
 }
 #endif
 
+static bool record_received_mid(lwm2m_server_t * serverP,
+                                uint16_t mid)
+{
+    bool validMid = (!serverP->rxMIDFlag || (serverP->lastRxMID + 1 == mid));
+    serverP->rxMIDFlag = !serverP->rxMIDFlag ? true : serverP->rxMIDFlag;
+    serverP->lastRxMID = validMid ? mid : serverP->lastRxMID;
+    if (!validMid)
+    {
+        LOG_ARG("Received unexpected request MID(%u)", mid);
+    }
+
+    return validMid;
+}
+
 static uint8_t handle_request(lwm2m_context_t * contextP,
                               void * fromSessionH,
                               coap_packet_t * message,
-                              coap_packet_t * response)
+                              coap_packet_t * response,
+                              bool validMid)
 {
     lwm2m_uri_t * uriP = NULL;
     uint8_t result = COAP_IGNORE;
@@ -196,8 +211,11 @@ static uint8_t handle_request(lwm2m_context_t * contextP,
                     coap_init_message(response, COAP_TYPE_ACK, 0, message->mid);
                     message_send(contextP, response, fromSessionH);
 
-                    // Get actual response from user app
-                    return lwm2mcore_CallCoapEventHandler(message);
+                    if (validMid)
+                    {
+                        // Get actual response from user app
+                        return lwm2mcore_CallCoapEventHandler(message);
+                    }
                 }
             }
         }
@@ -420,6 +438,7 @@ void lwm2m_handle_packet(lwm2m_context_t * contextP,
                          int length,
                          void * fromSessionH)
 {
+    bool validMid = true;
     uint8_t coap_error_code = NO_ERROR;
     static coap_packet_t message[1];
     static coap_packet_t response[1];
@@ -502,6 +521,9 @@ void lwm2m_handle_packet(lwm2m_context_t * contextP,
                     // handle block 1
                     coap_error_code = coap_block1_handler(&serverP->block1Data, message->mid, message->payload, message->payload_len, block1_size, block1_num, block1_more, &complete_buffer, &complete_buffer_size);
 
+                    // check if received MID is valid
+                    validMid = record_received_mid(serverP, message->mid);
+
                     // if payload is complete, replace it in the coap message.
                     if (coap_error_code == NO_ERROR)
                     {
@@ -518,9 +540,26 @@ void lwm2m_handle_packet(lwm2m_context_t * contextP,
                 coap_error_code = COAP_501_NOT_IMPLEMENTED;
 #endif
             }
+            else
+            {
+#ifdef LWM2M_CLIENT_MODE
+                // get server
+                lwm2m_server_t *serverP = utils_findServer(contextP, fromSessionH);
+#ifdef LWM2M_BOOTSTRAP
+                if (serverP == NULL)
+                {
+                    serverP = utils_findBootstrapServer(contextP, fromSessionH);
+                }
+#endif
+#endif
+                if (serverP != NULL)
+                {
+                    validMid = record_received_mid(serverP, message->mid);
+                }
+            }
             if (coap_error_code == NO_ERROR)
             {
-                coap_error_code = handle_request(contextP, fromSessionH, message, response);
+                coap_error_code = handle_request(contextP, fromSessionH, message, response, validMid);
             }
             if (coap_error_code==NO_ERROR)
             {
