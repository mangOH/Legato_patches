From 624d8d4d5948f602c72d84285ac56752b3b17b3a Mon Sep 17 00:00:00 2001
From: David Clark <dclark@sierrawireless.com>
Date: Wed, 17 Jan 2018 08:49:55 -0800
Subject: [PATCH 2/4] Missing matching SSIDs in scan list

Updated to add the BSSID to the AP info and also updated the
function to update the scan list to use the BSSID instead of the
SSID when searching for duplicates.

Resolves: LE-9186
Change-Id: If96998101443ddce0c69cd342d8474160d48d850
---
 apps/tools/wifi/wifi/wifi_client.c             | 29 +++++----
 service/daemon/le_wifiClient.c                 | 90 +++++++++++++++++++++++++-
 service/platformAdaptor/inc/pa_wifi.h          |  1 +
 service/platformAdaptor/ti/pa_wifi_client_ti.c | 37 +++++++----
 4 files changed, 131 insertions(+), 26 deletions(-)

diff --git a/apps/tools/wifi/wifi/wifi_client.c b/apps/tools/wifi/wifi/wifi_client.c
index 847c030..2f8260f 100644
--- a/apps/tools/wifi/wifi/wifi_client.c
+++ b/apps/tools/wifi/wifi/wifi_client.c
@@ -96,27 +96,32 @@ static void WifiReadScanResults
     {
         do
         {
+            char bssid[LE_WIFIDEFS_MAX_BSSID_BYTES];
             uint8_t ssidBytes[LE_WIFIDEFS_MAX_SSID_BYTES];
             // Contains ssidNumElements number of bytes
             size_t ssidNumElements = LE_WIFIDEFS_MAX_SSID_LENGTH;
 
-            if (LE_OK == (result = le_wifiClient_GetSsid(apRef,
-                &ssidBytes[0],
-                &ssidNumElements)))
+            result = le_wifiClient_GetSsid(apRef, ssidBytes, &ssidNumElements);
+            if (result != LE_OK)
             {
-                printf("Found:\tSSID:\t\"%.*s\"\tStrength:%d\tRef:%p\n",
-                    (int)ssidNumElements,
-                    (char *)&ssidBytes[0],
-                    le_wifiClient_GetSignalStrength(apRef),
-                    apRef);
+                printf("ERROR::le_wifiClient_GetSsid failed: %d", result);
+                exit(EXIT_FAILURE);
             }
-            else
+
+            result = le_wifiClient_GetBssid(apRef, bssid, sizeof(bssid) - 1);
+            if (result != LE_OK)
             {
-                printf("ERROR::le_wifiClient_GetSsid failed: %d", result);
+                printf("ERROR::le_wifiClient_GetBssid failed: %d", result);
                 exit(EXIT_FAILURE);
             }
-        }
-        while (NULL != (apRef = le_wifiClient_GetNextAccessPoint()));
+
+            printf("Found:\tSSID:\t\"%.*s\"\tBSSID:\t\"%s\"\tStrength:%d\tRef:%p\n",
+                   (int)ssidNumElements,
+                   (char *)&ssidBytes[0],
+                   (char *)&bssid[0],
+                   le_wifiClient_GetSignalStrength(apRef),
+                   apRef);
+        } while (NULL != (apRef = le_wifiClient_GetNextAccessPoint()));
     }
     else
     {
diff --git a/service/daemon/le_wifiClient.c b/service/daemon/le_wifiClient.c
index d8dca74..ea1a6ca 100644
--- a/service/daemon/le_wifiClient.c
+++ b/service/daemon/le_wifiClient.c
@@ -120,6 +120,46 @@ static void PaEventHandler
     le_event_Report(NewWifiEventId, (void *)&event, sizeof(le_wifiClient_Event_t));
 }
 
+//--------------------------------------------------------------------------------------------------
+/**
+ * Local function to find an access point reference based on BSSID among the AP found in scan.
+ * If not found will return NULL.
+ */
+//--------------------------------------------------------------------------------------------------
+static le_wifiClient_AccessPointRef_t FindAccessPointRefFromBssid
+(
+    const char* bssidPtr
+        ///< [OUT]
+        ///< The BSSID returned as a byte array.
+)
+{
+    le_wifiClient_AccessPointRef_t apRef = NULL;
+    le_ref_IterRef_t               iter  = le_ref_GetIterator(ScanApRefMap);
+
+    LE_DEBUG("Find AP from BSSID");
+
+    while (le_ref_NextNode(iter) == LE_OK)
+    {
+        apRef = (le_wifiClient_AccessPointRef_t)le_ref_GetSafeRef(iter);
+        if (NULL != apRef)
+        {
+            FoundAccessPoint_t *apPtr = (FoundAccessPoint_t *)le_ref_Lookup(ScanApRefMap, apRef);
+            if (NULL != apPtr)
+            {
+                if (0 == strncmp(apPtr->accessPoint.bssid, bssidPtr, LE_WIFIDEFS_MAX_BSSID_BYTES))
+                {
+                    LE_DEBUG("Found apRef %p", apRef);
+                    return apRef;
+                }
+            }
+        }
+        else
+        {
+            LE_ERROR("ERROR le_ref_GetSafeRef returned NULL iter:%p", iter);
+        }
+    }
+    return NULL;
+}
 
 //--------------------------------------------------------------------------------------------------
 /**
@@ -182,9 +222,7 @@ static le_wifiClient_AccessPointRef_t AddAccessPointToApRefMap
 )
 {
     // first see if it alreay exists in our list of reference.
-    le_wifiClient_AccessPointRef_t returnedRef = FindAccessPointRefFromSsid(
-        apPtr->ssidBytes,
-        apPtr->ssidLength);
+    le_wifiClient_AccessPointRef_t returnedRef = FindAccessPointRefFromBssid(apPtr->bssid);
 
     if (NULL != returnedRef)
     {
@@ -788,6 +826,52 @@ int16_t le_wifiClient_GetSignalStrength
     return apPtr->accessPoint.signalStrength;
 }
 
+//--------------------------------------------------------------------------------------------------
+/**
+ * Get the BSSID of the AccessPoint
+ *
+ * @return LE_FAULT         Function failed.
+ * @return LE_BAD_PARAMETER Some parameter is invalid.
+ * @return LE_OK            Function succeeded.
+ */
+//--------------------------------------------------------------------------------------------------
+le_result_t le_wifiClient_GetBssid
+(
+    le_wifiClient_AccessPointRef_t apRef,
+        ///< [IN]
+        ///< WiFi Access Point reference.
+
+    char *bssidPtr,
+        ///< [OUT]
+        ///< The BSSID
+
+    size_t bssidSize
+        ///< [IN]
+)
+{
+    FoundAccessPoint_t *apPtr = le_ref_Lookup(ScanApRefMap, apRef);
+
+    LE_DEBUG("AP ref %p", apRef);
+    if (NULL == apPtr)
+    {
+        LE_ERROR("Invalid access point reference.");
+        return LE_BAD_PARAMETER;
+    }
+
+    if (NULL == bssidPtr)
+    {
+        LE_ERROR("Invalid parameter BSSID = %p", bssidPtr);
+        return LE_BAD_PARAMETER;
+    }
+
+    if (strnlen(apPtr->accessPoint.bssid, LE_WIFIDEFS_MAX_BSSID_BYTES) > bssidSize)
+    {
+        return LE_OVERFLOW;
+    }
+    strncpy(bssidPtr, apPtr->accessPoint.bssid, LE_WIFIDEFS_MAX_BSSID_BYTES);
+
+    return LE_OK;
+}
 
 //--------------------------------------------------------------------------------------------------
 /**
diff --git a/service/platformAdaptor/inc/pa_wifi.h b/service/platformAdaptor/inc/pa_wifi.h
index ac16541..97adba4 100644
--- a/service/platformAdaptor/inc/pa_wifi.h
+++ b/service/platformAdaptor/inc/pa_wifi.h
@@ -22,6 +22,7 @@ typedef struct
     int16_t  signalStrength;                        ///< 0xffff means value was not found.
     uint8_t  ssidLength;                            ///< The number of bytes in the ssidBytes.
     uint8_t  ssidBytes[LE_WIFIDEFS_MAX_SSID_BYTES]; ///< Contains ssidLength number of bytes.
+    char     bssid[LE_WIFIDEFS_MAX_BSSID_BYTES];    ///< Contains the bssid.
 } pa_wifiClient_AccessPoint_t;
 
 //--------------------------------------------------------------------------------------------------
diff --git a/service/platformAdaptor/ti/pa_wifi_client_ti.c b/service/platformAdaptor/ti/pa_wifi_client_ti.c
index 003afae..3a5761b 100644
--- a/service/platformAdaptor/ti/pa_wifi_client_ti.c
+++ b/service/platformAdaptor/ti/pa_wifi_client_ti.c
@@ -497,27 +497,42 @@ le_result_t pa_wifiClient_GetScanResult
     /* Default values */
     accessPointPtr->signalStrength = 0xffff;
     accessPointPtr->ssidLength = 0;
+    memset(&accessPointPtr->ssidBytes, 0, LE_WIFIDEFS_MAX_SSID_BYTES);
+    memset(&accessPointPtr->bssid, 0, LE_WIFIDEFS_MAX_BSSID_BYTES);
 
     /* Read the output a line at a time - output it. */
     while (NULL != fgets(path, sizeof(path) - 1, IwScanPipePtr))
     {
+        const char *ssidPrefix = "\tSSID: ";
+        const size_t ssidPrefixLen = strlen(ssidPrefix);
+        const char *signalPrefix = "\tsignal: ";
+        const size_t signalPrefixLen = strlen(signalPrefix);
+        const char *bssidPrefix = "BSS ";
+        const size_t bssidPrefixLen = strlen(bssidPrefix);
         LE_INFO("PARSING:%s: len:%zd", path, strnlen(path, sizeof(path) - 1));
 
-        if (0 == strncmp("\tSSID: ", path, 7))
+        if (0 == strncmp(ssidPrefix, path, ssidPrefixLen))
         {
-            accessPointPtr->ssidLength = strnlen(path, LE_WIFIDEFS_MAX_SSID_BYTES + 7) - 7 - 1;
-            LE_INFO("FOUND SSID:%s  %c%c.. ", path, path[7], path[8]);
-            memset(&accessPointPtr->ssidBytes, 0, LE_WIFIDEFS_MAX_SSID_BYTES);
-            memcpy (&accessPointPtr->ssidBytes, &path[7], accessPointPtr->ssidLength);
-            LE_INFO("FOUND SSID: Parsed:\"%s\"", &accessPointPtr->ssidBytes[0]);
+            // +1 and -1 are to allow for a newline which should be excluded from the SSID
+            accessPointPtr->ssidLength =
+                strnlen(&path[ssidPrefixLen], LE_WIFIDEFS_MAX_SSID_LENGTH + 1) - 1;
+            LE_INFO("FOUND SSID:%s  %c%c.. ", path, path[ssidPrefixLen], path[ssidPrefixLen + 1]);
+            memcpy(&accessPointPtr->ssidBytes, &path[ssidPrefixLen], accessPointPtr->ssidLength);
+            LE_INFO("SSID: '%s'", accessPointPtr->ssidBytes);
             return LE_OK;
         }
-        else if (0 == strncmp("\tsignal: ", path, 9))
+        else if (0 == strncmp(signalPrefix, path, signalPrefixLen))
         {
-            LE_INFO("FOUND SIGNAL STRENGTH:%s  %c %c ", path, path[10], path[11]);
-            accessPointPtr->signalStrength = atoi(&path[9]);
-            LE_INFO("FOUND SIGNAL STRENGTH: signalStrength:%d ",
-            accessPointPtr->signalStrength);
+            LE_INFO("FOUND SIGNAL STRENGTH:%s  %c %c ", path, path[signalPrefixLen + 1],
+                    path[signalPrefixLen + 2]);
+            accessPointPtr->signalStrength = atoi(&path[signalPrefixLen]);
+            LE_INFO("FOUND SIGNAL STRENGTH: signalStrength:%d ", accessPointPtr->signalStrength);
+        }
+        else if (0 == strncmp(bssidPrefix, path, bssidPrefixLen))
+        {
+            LE_INFO("FOUND BSSID: '%s'", &path[bssidPrefixLen]);
+            strncpy(accessPointPtr->bssid, &path[bssidPrefixLen], LE_WIFIDEFS_MAX_BSSID_LENGTH);
+            LE_INFO("BSSID: '%s'", accessPointPtr->bssid);
         }
     }
 
-- 
2.11.0

